// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2018 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

using System;
using System.Runtime.InteropServices;
using IntPtr = System.IntPtr;

namespace Steamworks
{
    [StructLayout(LayoutKind.Sequential, Pack = Packsize.value)]
    public struct SteamNetConnectionInfo_t
    {
        [StructLayout(LayoutKind.Explicit, Size = sizeof(char) * k_cchSteamNetworkingMaxConnectionCloseReason)]
        public struct CloseConnectionReason
        {
            /// Max length, in bytes (including null terminator) of the reason string
            /// when a connection is closed.
            public const int k_cchSteamNetworkingMaxConnectionCloseReason = 128;
        }

        [StructLayout(LayoutKind.Explicit, Size = sizeof(char) * k_cchSteamNetworkingMaxConnectionDescription)]
        public struct ConnectionDescription
        {
            /// Max length, in bytes (include null terminator) of debug description
            /// of a connection.
            public const int k_cchSteamNetworkingMaxConnectionDescription = 128;
        }

        [StructLayout(LayoutKind.Explicit, Size = sizeof(UInt32) * 64)]
        public struct Reserved
        {
        }

        /// Who is on the other end?  Depending on the connection type and phase of the connection, we might not know
        public SteamNetworkingIdentity m_identityRemote;

        /// Arbitrary user data set by the local application code
        public Int64 m_nUserData;

        /// Handle to listen socket this was connected on, or k_HSteamListenSocket_Invalid if we initiated the connection
        public HSteamListenSocket m_hListenSocket;

        /// Remote address.  Might be all 0's if we don't know it, or if this is N/A.
        /// (E.g. Basically everything except direct UDP connection.)
        public SteamNetworkingIPAddr m_addrRemote;
        public UInt16 m__pad1;

        /// What data center is the remote host in?  (0 if we don't know.)
        public UInt32 m_idPOPRemote;

        /// What relay are we using to communicate with the remote host?
        /// (0 if not applicable.)
        public UInt32 m_idPOPRelay;

        /// High level state of the connection
        public ESteamNetworkingConnectionState m_eState;

        /// Basic cause of the connection termination or problem.
        /// See ESteamNetConnectionEnd for the values used
        public int m_eEndReason;

        /// Human-readable, but non-localized explanation for connection
        /// termination or problem.  This is intended for debugging /
        /// diagnostic purposes only, not to display to users.  It might
        /// have some details specific to the issue.
        public CloseConnectionReason m_szEndDebug;

        /// Debug description.  This includes the connection handle,
        /// connection type (and peer information), and the app name.
        /// This string is used in various internal logging messages
        public ConnectionDescription m_szConnectionDescription;

        /// Internal stuff, room to change API easily
        public Reserved reserved;
    };
}
#endif //!DISABLESTEAMWORKS