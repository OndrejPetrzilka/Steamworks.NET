// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2018 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

using System;
using System.Runtime.InteropServices;
using IntPtr = System.IntPtr;

namespace Steamworks
{
    /// A message that has been received
    [StructLayout(LayoutKind.Sequential)]
    public struct SteamNetworkingMessage_t
    {
        /// Max size of a single message that we can SEND.
        /// Note: We might be wiling to receive larger messages,
        /// and our peer might, too.
        const int k_cbMaxSteamNetworkingSocketsMessageSizeSend = 512 * 1024;

        /// Message payload
        public IntPtr m_pData;

        /// Size of the payload.
        public UInt32 m_cbSize;

        /// The connection this came from.  (Not used when using the ISteamMessages interface)
        public HSteamNetConnection m_conn;

        /// Who sent this to us?
        public SteamNetworkingIdentity m_sender;

        /// The user data associated with the connection.
        ///
        /// This is *usually* the same as calling GetConnection() and then
        /// fetching the user data associated with that connection, but for
        /// the following subtle differences:
        ///
        /// - This user data will match the connection's user data at the time
        ///   is captured at the time the message is returned by the API.
        ///   If you subsequently change the userdata on the connection,
        ///   this won't be updated.
        /// - This is an inline call, so it's *much* faster.
        /// - You might have closed the connection, so fetching the user data
        ///   would not be possible.
        public Int64 m_nConnUserData;

        /// Local timestamps when it was received
        public SteamNetworkingMicroseconds m_usecTimeReceived;

        /// Message number assigned by the sender
        public Int64 m_nMessageNumber;

        /// Function used to free up m_pData.  This mechanism exists so that
        /// apps can create messages with buffers allocated from their own
        /// heap, and pass them into the library.  This function will
        /// usually be something like:
        ///
        /// free( pMsg->m_pData );
        /// void (*m_pfnFreeData)( SteamNetworkingMessage_t *pMsg );
        public IntPtr m_pfnFreeData;

        /// Function to used to decrement reference count and, if it's zero, release
        /// the message.  You should not normally need to access this directly.
        /// (Use Release(), and don't set this.)
        /// void (* m_pfnRelease) (SteamNetworkingMessage_t* pMsg );
        public IntPtr m_pfnRelease;

        /// The channel number the message was received on.
        /// (Not used for messages received on "connections")
        public int m_nChannel;

        /// Pad to multiple of 8 bytes
        int m___nPadDummy;
    };
}

#endif //!DISABLESTEAMWORKS